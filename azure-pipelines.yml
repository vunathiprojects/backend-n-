trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'novya-serviceconnection'
  appName: 'backend-n'
  pythonVersion: '3.11'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # Step 1: Set up Python
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
    displayName: 'Use Python $(pythonVersion)'

  # Step 2: Install ALL dependencies for both backends
  - script: |
      echo "Installing dependencies for both Django and FastAPI..."
      
      # Create comprehensive requirements.txt
      cat > requirements.txt << 'EOF'
      # Django dependencies
      django==4.2.7
      djangorestframework==3.14.0
      django-cors-headers==4.3.1
      psycopg2-binary==2.9.7
      gunicorn==21.2.0
      
      # FastAPI dependencies
      fastapi==0.104.1
      uvicorn[standard]==0.24.0
      python-multipart==0.0.6
      
      # AI/OpenAI dependencies
      openai==1.3.0
      python-dotenv==1.0.0
      tiktoken==0.5.2
      
      # Common dependencies
      anyio==3.7.1
      typing-extensions==4.8.0
      pydantic==2.5.0
      requests==2.31.0
      httpx==0.25.2
      EOF
      
      # Install to local packages directory
      pip install --target="./python_packages" -r requirements.txt
      
      echo "✅ All dependencies installed"
    displayName: 'Install all dependencies'

  # Step 3: Create unified router for both backends
  - script: |
      echo "Creating unified router for both backends..."
      
      # Create the main router application
      cat > app.py << 'ROUTER_EOF'
      from fastapi import FastAPI
      from fastapi.middleware.wsgi import WSGIMiddleware
      import os
      import sys
      
      # Add packages to path
      packages_path = os.path.join(os.path.dirname(__file__), 'python_packages')
      if packages_path not in sys.path:
          sys.path.insert(0, packages_path)
      
      app = FastAPI(title="Backend API")
      
      # Try to mount Django if available
      try:
          # Setup Django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
          from django.core.wsgi import get_wsgi_application
          django_app = get_wsgi_application()
          app.mount("/api", WSGIMiddleware(django_app))
          print("✅ Django mounted at /api")
      except Exception as e:
          print(f"❌ Django not available: {e}")
      
      # Try to mount FastAPI if available
      try:
          from ai_backend.app import app as fastapi_app
          app.mount("/ai", fastapi_app)
          print("✅ FastAPI mounted at /ai")
      except Exception as e:
          print(f"❌ FastAPI not available: {e}")
      
      @app.get("/")
      def root():
          return {
              "message": "Backend API is running", 
              "services": {
                  "django": "/api/",
                  "fastapi": "/ai/"
              }
          }
      
      if __name__ == "__main__":
          import uvicorn
          uvicorn.run(app, host="0.0.0.0", port=8000)
      ROUTER_EOF
      
      # Create startup script that uses the router
      cat > startup.sh << 'STARTUP_EOF'
      #!/bin/bash
      
      # Add local packages to Python path
      export PYTHONPATH="/home/site/wwwroot/python_packages:$PYTHONPATH"
      export PORT=8000
      
      echo "=== Starting Unified Backend ==="
      echo "Python path: $PYTHONPATH"
      echo "Current directory: $(pwd)"
      
      # Check if packages are available
      python3 -c "import sys; print('Python path:', sys.path)"
      python3 -c "import uvicorn; print('✅ uvicorn available')" || echo "❌ uvicorn not available"
      python3 -c "import django; print('✅ django available')" || echo "❌ django not available"
      
      echo "Starting unified router..."
      python3 app.py
      STARTUP_EOF
      
      chmod +x startup.sh
      echo "Unified router created"
    displayName: 'Create unified router'

  # Step 4: Test both backends
  - script: |
      echo "Testing both backends..."
      
      # Test FastAPI
      PYTHONPATH="./python_packages" python -c "
      try:
          from ai_backend.app import app
          print('✅ FastAPI app imported successfully')
      except Exception as e:
          print(f'❌ FastAPI error: {e}')
          import traceback
          traceback.print_exc()
      "
      
      # Test Django
      PYTHONPATH="./python_packages" python -c "
      try:
          import django
          from django.conf import settings
          if not settings.configured:
              settings.configure(DEBUG=True, INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'])
          print('✅ Django imported successfully')
          
          # Test if we can import your Django project
          try:
              import config.settings
              print('✅ Django settings imported successfully')
          except Exception as e:
              print(f'⚠️ Django settings import issue: {e}')
              
      except Exception as e:
          print(f'❌ Django error: {e}')
          import traceback
          traceback.print_exc()
      "
      
      # Test the unified router
      PYTHONPATH="./python_packages" python -c "
      try:
          import app
          print('✅ Unified router imported successfully')
      except Exception as e:
          print(f'❌ Router error: {e}')
          import traceback
          traceback.print_exc()
      "
    displayName: 'Test both backends'

  # Step 5: SIMPLIFIED Django configuration setup
  - script: |
      echo "Checking Django configuration..."
      
      # Check if Django config exists, if not create basic one
      if [ ! -f "config/settings.py" ]; then
        echo "Creating basic Django configuration..."
        
        # Create config directory
        mkdir -p config
        
        # Create __init__.py
        echo "# Django config package" > config/__init__.py
        
        # Create basic settings.py using echo commands
        echo "Creating settings.py..."
        cat > config/settings.py << 'SETTINGS_EOF'
        import os
        from pathlib import Path
        
        BASE_DIR = Path(__file__).resolve().parent.parent
        
        SECRET_KEY = 'django-insecure-temporary-key-for-deployment'
        DEBUG = True
        ALLOWED_HOSTS = ['*']
        
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'rest_framework',
            'corsheaders',
        ]
        
        MIDDLEWARE = [
            'corsheaders.middleware.CorsMiddleware',
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]
        
        ROOT_URLCONF = 'config.urls'
        WSGI_APPLICATION = 'config.wsgi.application'
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        
        CORS_ALLOW_ALL_ORIGINS = True
        STATIC_URL = '/static/'
        SETTINGS_EOF
        
        # Create urls.py
        cat > config/urls.py << 'URLS_EOF'
        from django.contrib import admin
        from django.urls import path
        from django.http import JsonResponse
        
        def home(request):
            return JsonResponse({'message': 'Django API is working'})
        
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('', home),
        ]
        URLS_EOF
        
        # Create wsgi.py
        cat > config/wsgi.py << 'WSGI_EOF'
        import os
        from django.core.wsgi import get_wsgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
        application = get_wsgi_application()
        WSGI_EOF
        
        echo "✅ Basic Django configuration created"
      else
        echo "✅ Django configuration already exists"
      fi
    displayName: 'Setup Django configuration'

  # Step 6: Archive everything
  - task: ArchiveFiles@2
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
      replaceExistingArchive: true

  # Step 7: Deploy
  - task: AzureWebApp@1
    displayName: 'Deploy to Azure Web App'
    inputs:
      azureSubscription: $(azureSubscription)
      appName: $(appName)
      package: '$(Build.ArtifactStagingDirectory)/backend.zip'