trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'novya-serviceconnection'
  appName: 'backend-n'
  pythonVersion: '3.11'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # Step 1: Set up Python
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
    displayName: 'Use Python $(pythonVersion)'

  # Step 2: Install ALL dependencies for both backends
  - script: |
      echo "Installing dependencies for both Django and FastAPI..."
      
      # Create comprehensive requirements.txt
      cat > requirements.txt << 'EOF'
      # Django dependencies
      django==4.2.7
      djangorestframework==3.14.0
      django-cors-headers==4.3.1
      psycopg2-binary==2.9.7
      gunicorn==21.2.0
      
      # FastAPI dependencies
      fastapi==0.104.1
      uvicorn[standard]==0.24.0
      python-multipart==0.0.6
      
      # AI/OpenAI dependencies
      openai==1.3.0
      python-dotenv==1.0.0
      tiktoken==0.5.2
      
      # Common dependencies
      anyio==3.7.1
      typing-extensions==4.8.0
      pydantic==2.5.0
      requests==2.31.0
      httpx==0.25.2
      EOF
      
      # Install to local packages directory
      pip install --target="./python_packages" -r requirements.txt
      
      echo "✅ All dependencies installed"
    displayName: 'Install all dependencies'

  # Step 3: Create unified router for both backends
  - script: |
      echo "Creating unified router for both backends..."
      
      # Create the main router application using Python directly
      python -c "
      router_code = '''
      from fastapi import FastAPI
      from fastapi.middleware.wsgi import WSGIMiddleware
      import os
      import sys

      # Add packages to path
      packages_path = os.path.join(os.path.dirname(__file__), 'python_packages')
      if packages_path not in sys.path:
          sys.path.insert(0, packages_path)

      app = FastAPI(title=\"Backend API\")

      # Try to mount Django if available
      try:
          # Setup Django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
          from django.core.wsgi import get_wsgi_application
          django_app = get_wsgi_application()
          app.mount(\"/api\", WSGIMiddleware(django_app))
          print(\"✅ Django mounted at /api\")
      except Exception as e:
          print(f\"❌ Django not available: {e}\")

      # Try to mount FastAPI if available
      try:
          from ai_backend.app import app as fastapi_app
          app.mount(\"/ai\", fastapi_app)
          print(\"✅ FastAPI mounted at /ai\")
      except Exception as e:
          print(f\"❌ FastAPI not available: {e}\")

      @app.get(\"/\")
      def root():
          return {
              \"message\": \"Backend API is running\", 
              \"services\": {
                  \"django\": \"/api/\",
                  \"fastapi\": \"/ai/\"
              }
          }

      if __name__ == \"__main__\":
          import uvicorn
          uvicorn.run(app, host=\"0.0.0.0\", port=8000)
      '''
      
      with open('app.py', 'w') as f:
          f.write(router_code)
      "
      
      # Create startup script
      echo '#!/bin/bash' > startup.sh
      echo '' >> startup.sh
      echo '# Add local packages to Python path' >> startup.sh
      echo 'export PYTHONPATH="/home/site/wwwroot/python_packages:$PYTHONPATH"' >> startup.sh
      echo 'export PORT=8000' >> startup.sh
      echo '' >> startup.sh
      echo 'echo "=== Starting Unified Backend ==="' >> startup.sh
      echo 'echo "Python path: $PYTHONPATH"' >> startup.sh
      echo 'echo "Current directory: $(pwd)"' >> startup.sh
      echo '' >> startup.sh
      echo '# Check if packages are available' >> startup.sh
      echo 'python3 -c "import sys; print(\"Python path:\", sys.path)"' >> startup.sh
      echo 'python3 -c "import uvicorn; print(\"✅ uvicorn available\")" || echo "❌ uvicorn not available"' >> startup.sh
      echo 'python3 -c "import django; print(\"✅ django available\")" || echo "❌ django not available"' >> startup.sh
      echo '' >> startup.sh
      echo 'echo "Starting unified router..."' >> startup.sh
      echo 'python3 app.py' >> startup.sh
      
      chmod +x startup.sh
      echo "Unified router created"
    displayName: 'Create unified router'

  # Step 4: Test both backends
  - script: |
      echo "Testing both backends..."
      
      # Test FastAPI
      PYTHONPATH="./python_packages" python -c "
      try:
          from ai_backend.app import app
          print('✅ FastAPI app imported successfully')
      except Exception as e:
          print(f'❌ FastAPI error: {e}')
          import traceback
          traceback.print_exc()
      "
      
      # Test Django
      PYTHONPATH="./python_packages" python -c "
      try:
          import django
          from django.conf import settings
          if not settings.configured:
              settings.configure(DEBUG=True, INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'])
          print('✅ Django imported successfully')
          
          # Test if we can import your Django project
          try:
              import config.settings
              print('✅ Django settings imported successfully')
          except Exception as e:
              print(f'⚠️ Django settings import issue: {e}')
              
      except Exception as e:
          print(f'❌ Django error: {e}')
          import traceback
          traceback.print_exc()
      "
      
      # Test the unified router
      PYTHONPATH="./python_packages" python -c "
      try:
          import app
          print('✅ Unified router imported successfully')
      except Exception as e:
          print(f'❌ Router error: {e}')
          import traceback
          traceback.print_exc()
      "
    displayName: 'Test both backends'

  # Step 5: SIMPLE Django configuration setup - REMOVED COMPLEX HEREDOCS
  - script: |
      echo "Checking Django configuration..."
      
      # Check if Django config exists
      if [ -f "config/settings.py" ]; then
        echo "✅ Django configuration already exists"
        exit 0
      fi
      
      echo "Creating basic Django configuration..."
      
      # Create config directory
      mkdir -p config
      
      # Create __init__.py
      echo "# Django config package" > config/__init__.py
      
      # Create settings.py using echo commands (no heredoc)
      echo "import os" > config/settings.py
      echo "from pathlib import Path" >> config/settings.py
      echo "" >> config/settings.py
      echo "BASE_DIR = Path(__file__).resolve().parent.parent" >> config/settings.py
      echo "SECRET_KEY = 'django-insecure-temporary-key-for-deployment'" >> config/settings.py
      echo "DEBUG = True" >> config/settings.py
      echo "ALLOWED_HOSTS = ['*']" >> config/settings.py
      echo "" >> config/settings.py
      echo "INSTALLED_APPS = [" >> config/settings.py
      echo "    'django.contrib.admin'," >> config/settings.py
      echo "    'django.contrib.auth'," >> config/settings.py
      echo "    'django.contrib.contenttypes'," >> config/settings.py
      echo "    'django.contrib.sessions'," >> config/settings.py
      echo "    'django.contrib.messages'," >> config/settings.py
      echo "    'django.contrib.staticfiles'," >> config/settings.py
      echo "    'rest_framework'," >> config/settings.py
      echo "    'corsheaders'," >> config/settings.py
      echo "]" >> config/settings.py
      echo "" >> config/settings.py
      echo "MIDDLEWARE = [" >> config/settings.py
      echo "    'corsheaders.middleware.CorsMiddleware'," >> config/settings.py
      echo "    'django.middleware.security.SecurityMiddleware'," >> config/settings.py
      echo "    'django.contrib.sessions.middleware.SessionMiddleware'," >> config/settings.py
      echo "    'django.middleware.common.CommonMiddleware'," >> config/settings.py
      echo "    'django.middleware.csrf.CsrfViewMiddleware'," >> config/settings.py
      echo "    'django.contrib.auth.middleware.AuthenticationMiddleware'," >> config/settings.py
      echo "    'django.contrib.messages.middleware.MessageMiddleware'," >> config/settings.py
      echo "    'django.middleware.clickjacking.XFrameOptionsMiddleware'," >> config/settings.py
      echo "]" >> config/settings.py
      echo "" >> config/settings.py
      echo "ROOT_URLCONF = 'config.urls'" >> config/settings.py
      echo "WSGI_APPLICATION = 'config.wsgi.application'" >> config/settings.py
      echo "" >> config/settings.py
      echo "DATABASES = {" >> config/settings.py
      echo "    'default': {" >> config/settings.py
      echo "        'ENGINE': 'django.db.backends.sqlite3'," >> config/settings.py
      echo "        'NAME': BASE_DIR / 'db.sqlite3'," >> config/settings.py
      echo "    }" >> config/settings.py
      echo "}" >> config/settings.py
      echo "" >> config/settings.py
      echo "CORS_ALLOW_ALL_ORIGINS = True" >> config/settings.py
      echo "STATIC_URL = '/static/'" >> config/settings.py
      
      # Create urls.py
      echo "from django.contrib import admin" > config/urls.py
      echo "from django.urls import path" >> config/urls.py
      echo "from django.http import JsonResponse" >> config/urls.py
      echo "" >> config/urls.py
      echo "def home(request):" >> config/urls.py
      echo "    return JsonResponse({'message': 'Django API is working'})" >> config/urls.py
      echo "" >> config/urls.py
      echo "urlpatterns = [" >> config/urls.py
      echo "    path('admin/', admin.site.urls)," >> config/urls.py
      echo "    path('', home)," >> config/urls.py
      echo "]" >> config/urls.py
      
      # Create wsgi.py
      echo "import os" > config/wsgi.py
      echo "from django.core.wsgi import get_wsgi_application" >> config/wsgi.py
      echo "" >> config/wsgi.py
      echo "os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')" >> config/wsgi.py
      echo "application = get_wsgi_application()" >> config/wsgi.py
      
      echo "✅ Basic Django configuration created"
    displayName: 'Setup Django configuration'

  # Step 6: Archive everything
  - task: ArchiveFiles@2
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
      replaceExistingArchive: true

  # Step 7: Deploy
  - task: AzureWebApp@1
    displayName: 'Deploy to Azure Web App'
    inputs:
      azureSubscription: $(azureSubscription)
      appName: $(appName)
      package: '$(Build.ArtifactStagingDirectory)/backend.zip'