trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'novya-serviceconnection'
  appName: 'backend-n'
  pythonVersion: '3.11'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # Step 1: Set up Python
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
    displayName: 'Use Python $(pythonVersion)'

  # Step 2: Install all dependencies in the correct location
  - script: |
      echo "Installing all dependencies..."
      
      # Install root dependencies
      pip install -r requirements.txt
      
      # Install ai_backend dependencies
      cd ai_backend
      pip install -r requirements.txt
      cd ..
      
      # Explicitly install uvicorn and fastapi
      pip install uvicorn[standard] fastapi
      
      # Create a requirements.txt with all installed packages
      pip freeze > deployed_requirements.txt
    displayName: 'Install all dependencies'

  # Step 3: Verify installations
  - script: |
      echo "Verifying installations..."
      python -c "import uvicorn, fastapi; print('âœ… All imports successful')"
      pip list | grep -E "(uvicorn|fastapi)"
    displayName: 'Verify installations'

  # Step 4: Create startup script that uses direct Python command
  - script: |
      echo "Creating startup script..."
      
      # Create startup.sh
      cat > startup.sh << 'EOF'
      #!/bin/bash
      echo "Starting FastAPI application..."
      cd ai_backend
      python -m uvicorn app:app --host 0.0.0.0 --port ${PORT:-8000} --workers 1
      EOF
      chmod +x startup.sh
      
      echo "Startup script content:"
      cat startup.sh
    displayName: 'Create startup script'

  # Step 5: Create requirements.txt in root with ALL dependencies
  - script: |
      echo "Creating comprehensive requirements.txt..."
      pip freeze > requirements.txt
      echo "Final requirements.txt:"
      head -20 requirements.txt
    displayName: 'Create comprehensive requirements'

  # Step 6: Archive everything including dependencies
  - task: ArchiveFiles@2
    displayName: 'Archive files for deployment'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
      replaceExistingArchive: true

  # Step 7: Deploy to Azure Web App
  - task: AzureWebApp@1
    displayName: 'Deploy to Azure Web App'
    inputs:
      azureSubscription: $(azureSubscription)
      appName: $(appName)
      package: '$(Build.ArtifactStagingDirectory)/backend.zip'